from django.shortcuts import render, redirect, get_object_or_404
from shared_models.models import {% for model in models %}{{model}}{% if not loop.last %}, {% endif %}{% endfor %}

{#
    TODO: 
    - Implement queries in renders
-#}

def log_out(request):
    return redirect('/authentication')

def update_render_list(model_list : list, custom_methods : list = [], queries : list = []) -> list:
    newlist = model_list
    newlist = update_models_with_derived_attribute_custom_methods(newlist, custom_methods)
    newlist = update_models_with_queries(newlist, queries)
    return newlist

def update_models_with_derived_attribute_custom_methods(model_list : list, custom_methods : list = []) -> list:
    newlist = []
    if len(custom_methods) > 1:
        raise Exception("more than 1 derived_attribute_function is not supported: "+ str(custom_methods))
    for model in model_list:
        if custom_methods and custom_methods != []:
            for custom_method in custom_methods:
                for model_attribute in model.__dict__:
                    if "get_" + model_attribute == custom_method:
                        try:
                            derived_attribute_function = getattr(model, custom_method)
                            derived_attribute_function()
                        except (AttributeError, Exception) as err:
                            continue 
        newlist.append(model)
    return newlist

def update_models_with_queries(model_list : list, queries : list = []) -> list:
    newlist = []
    if len(queries) > 1:
        raise Exception("more than 1 queries is not supported: "+ str(queries))
    for model in model_list:
        {# print("query "+ str(type(model))) #}
        if queries and queries != []:
            raise Exception("unimplemented")
            for query in queries:
                for model_attribute in model.__dict__:
                    if model_attribute == query.attribute and getattr(model_attribute, model) == query.value:
                        newlist.append(model)
        newlist.append(model)
    return newlist

{% for section_component in section_components -%}
{% if section_component.hasCreate %}
def {{ section_component.page | lower }}_{{ section_component.name | lower }}_create(request):
    if request.method == 'POST':
        new_object = {{ section_component.model }}()
        {% for attribute in section_component.attributes -%}
        {% if section_component.attribute_types[attribute] == AttributeType.BOOLEAN -%}
        new_object.{{ attribute }} = (request.POST.get('instance_{{ attribute | lower }}') == 'on')
        {% elif section_component.attribute_types[attribute] == AttributeType.STRING -%}
        if request.POST.get('instance_{{ attribute | lower }}') == '':
            new_object.{{ attribute }} = None
        else:
            new_object.{{ attribute }} = request.POST.get('instance_{{ attribute | lower }}')

        {% elif section_component.attribute_types[attribute] == AttributeType.INTEGER -%}
        if request.POST.get('instance_{{ attribute | lower }}') == '':
            new_object.{{ attribute }} = None
        else: 
            new_object.{{ attribute }} = request.POST.get('instance_{{ attribute | lower }}')
        {% elif section_component.attribute_types[attribute] == AttributeType.MODEL -%}
        new_object.{{ attribute }} = {{ attribute }}.objects.filter(pk=request.POST.get('instance_{{ attribute | lower}}_id')).first()
        {% endif -%}
        {% endfor -%}
        new_object.save()
    return redirect('render_{{ section_component.page }}')

def {{ section_component.page | lower }}_{{ section_component.name | lower }}_create_popup(request):
    context = {}
    {% for model in models_on_pages[section_component.page] -%}
    context['{{ model | lower }}_list'] = {{ model }}.objects.all()
    context['{{ model | lower }}_list'] = update_render_list(context['{{ model | lower }}_list'], [
        {%- for pagename in section_components_on_pages -%}
            {%- if pagename | lower == page | lower %}
                {%- for section_component in section_components_on_pages[pagename] -%}
                    {% set custom_method_name = section_component.contains_custom_on_render_for_model(pagename,model) -%}
                    {%- if not custom_method_name == "" -%}
                        "{{ custom_method_name }}"
                        {%- if not loop.last %}, {% endif -%}
                    {%- endif -%}
                {%- endfor -%}
            {% endif -%}
        {%- endfor -%}
        ])
    {% endfor -%}
    context['{{ section_component.name | lower }}_create_popup'] = True
    return render(request, '{{ section_component.page }}.html', context)
{% endif -%}


{% if section_component.hasDelete %}
def {{ section_component.page | lower }}_{{ section_component.name | lower }}_delete(request, instance_id):
    if request.method == 'POST':
        instance = get_object_or_404({{ section_component.model }}, pk=instance_id)
        instance.delete()
    return redirect('render_{{ section_component.page }}')
{% endif -%}

{% if section_component.hasUpdate %}
def {{ section_component.page | lower }}_{{ section_component.name | lower }}_update(request, instance_id):
    if request.method == 'POST':
        instance = get_object_or_404({{ section_component.model }}, pk=instance_id)
        {% for attribute in section_component.attributes -%}
        {% if section_component.updateable_attributes[attribute] -%}
        {% if section_component.attribute_types[attribute] == AttributeType.BOOLEAN -%}
        instance.{{ attribute }} = (request.POST.get('instance_{{ attribute | lower }}') == 'on')
        {% elif section_component.attribute_types[attribute] == AttributeType.STRING -%}
        instance.{{ attribute }} = request.POST.get('instance_{{ attribute | lower}}')
        {% elif section_component.attribute_types[attribute] == AttributeType.INTEGER -%}
        instance.{{ attribute }} = request.POST.get('instance_{{ attribute | lower }}')
        {% elif section_component.attribute_types[attribute] == AttributeType.MODEL -%}
        instance.{{ attribute | lower }} = get_object_or_404({{ attribute }}, pk=request.POST.get('instance_{{ attribute | lower }}_id'))
        {% endif -%}
        {% endif -%}
        {% endfor -%}
        instance.save()
    return redirect('render_{{ section_component.page }}')


def {{ section_component.page | lower }}_{{ section_component.name | lower }}_update_popup(request, instance_id):
    context = {}
    {% for model in models_on_pages[section_component.page] -%}
    context['{{ model | lower }}_list'] = {{ model }}.objects.all()
    context['{{ model | lower }}_list'] = update_render_list(context['{{ model | lower }}_list'], [
        {%- for pagename in section_components_on_pages -%}
            {%- if pagename | lower == page | lower %}
                {%- for section_component in section_components_on_pages[pagename] -%}
                    {% set custom_method_name = section_component.contains_custom_on_render_for_model(pagename,model) -%}
                    {%- if not custom_method_name == "" -%}
                        "{{ custom_method_name }}"
                        {%- if not loop.last %}, {% endif -%}
                    {%- endif -%}
                {%- endfor -%}
            {% endif -%}
        {%- endfor -%}
        ])
    {% endfor -%}
    context['update_instance'] = get_object_or_404({{ section_component.model }}, pk=instance_id)
    return render(request, '{{ section_component.page }}.html', context)
{% endif -%}

{% for custom_method in section_component.custom_methods %}
def {{ section_component.page | lower }}_{{ section_component.name | lower }}_{{ custom_method.method_name }}(request, instance_id):
    context = {}
    if request.method == 'POST':
        try:
            instance = get_object_or_404({{ custom_method.primary_model_name }}, pk=instance_id)
            instance.{{ custom_method.method_name }}(request)
        except Exception as err:
            context["error"] = err
    {% for model in models_on_pages[section_component.page] -%}
    context['{{ model | lower }}_list'] = {{ model }}.objects.all()
    context['{{ model | lower }}_list'] = update_render_list(context['{{ model | lower }}_list'], [
        {%- for pagename in section_components_on_pages -%}
            {%- if pagename | lower == page | lower %}
                {%- for section_component in section_components_on_pages[pagename] -%}
                    {% set custom_method_name = section_component.contains_custom_on_render_for_model(pagename,model) -%}
                    {%- if not custom_method_name == "" -%}
                        "{{ custom_method_name }}"
                        {%- if not loop.last %}, {% endif -%}
                    {%- endif -%}
                {%- endfor -%}
            {% endif -%}
        {%- endfor -%}
        ])
    {% endfor -%}
    {# return render(request, '{{ section_component.page }}.html', context) -#}
    return redirect('render_{{ section_component.page }}')
{% endfor -%}

{% endfor -%}

{% for page in pages %}
def render_{{ page | lower }}(request):
    context = {}
    {% for model in models_on_pages[page] -%}
    context['{{ model | lower }}_list'] = {{ model }}.objects.all()
    context['{{ model | lower }}_list'] = update_render_list(context['{{ model | lower }}_list'], [
        {%- for pagename in section_components_on_pages -%}
            {%- if pagename | lower == page | lower %}
                {%- for section_component in section_components_on_pages[pagename] -%}
                    {% set custom_method_name = section_component.contains_custom_on_render_for_model(pagename,model) -%}
                    {%- if not custom_method_name == "" -%}
                        "{{ custom_method_name }}"
                        {%- if not loop.last %}, {% endif -%}
                    {%- endif -%}
                {%- endfor -%}
            {% endif -%}
        {%- endfor -%}
        ])
    {% endfor -%}
    return render(request, '{{ page }}.html', context)
{% endfor %}

def homerender(request):
    context = {}
    context['user'] = request.user
    return render(request, '{{ app_name }}_home.html', context)
