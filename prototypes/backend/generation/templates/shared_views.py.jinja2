from django.apps import apps
from django.shortcuts import get_object_or_404
from django.views.generic import CreateView, UpdateView, ListView, DeleteView, TemplateView
from django.views import View
{% if authentication_present -%}
from django.contrib.auth.mixins import UserPassesTestMixin, LoginRequiredMixin

from workflow_engine.models import ActiveProcess


class RoleRequiredMixin(UserPassesTestMixin):
    required_roles = []

    def test_func(self):
        return (
            any(role in self.request.user.roles for role in self.required_roles)
            if self.required_roles is not None
            else True
        )
            
{% endif -%}

class GenericViewMixin{% if authentication_present -%}(LoginRequiredMixin, RoleRequiredMixin){% endif %}:
    model = None
    template_name = None
    context_object_name = None


class GenericTemplateView({% if authentication_present -%}LoginRequiredMixin, RoleRequiredMixin, {% endif %}TemplateView):
    template_name = None


class GenericView({% if authentication_present -%}LoginRequiredMixin, RoleRequiredMixin, {% endif %}View):
    pass


class GenericListView(GenericViewMixin, ListView):
    
    @property
    def active_process(self) -> ActiveProcess | None:
        return get_object_or_404(
            ActiveProcess,
            pk=self.kwargs.get('active_process_id'),
        ) if 'active_process_id' in self.kwargs else None

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        self._add_create_context(context)
        self._add_update_context(context)
        self._execute_custom_method()
        return context

    def _get_related_keys(self, partial_key: str) -> list[str]:
        return [
            key for key in self.request.GET
            if key.startswith(partial_key) and key != partial_key
        ]

    def _add_create_context(self, context: dict) -> None:
        create_keys = self._get_related_keys('create_')
        if not create_keys:
            return
        for key in create_keys:
            if self.request.GET[key] == 'true':
                context[key] = True
                break
        
    def _add_update_context(self, context: dict) -> None:
        update_keys = self._get_related_keys('instance_id_')
        if not update_keys:
            return
        for key in update_keys:
            if model := apps.get_model('shared_models', key.split("_")[-1]):
                context['update_instance'] = get_object_or_404(model, pk=self.request.GET[key])
                break
    
    def _execute_custom_method(self) -> None:
        custom_method_keys = self._get_related_keys('custom_')
        if not custom_method_keys:
            return
        for key in custom_method_keys:
            _, model, method = key.split("_", 2)
            if model_instance := apps.get_model('shared_models', model):
                instance = get_object_or_404(model_instance, pk=self.request.GET[key])
                getattr(instance, method)()
                break

class GenericCreateView(GenericViewMixin, CreateView):
    fields = None
    success_url = None


class GenericUpdateView(GenericViewMixin, UpdateView):
    fields = None
    success_url = None


class GenericDeleteView(GenericViewMixin, DeleteView):
    success_url = None