from django.shortcuts import get_object_or_404, redirect, render

from workflow_engine.models import ActionLog, ActiveProcess, Process
from shared_models.views import GenericView, GenericTemplateView

class StartProcessView(GenericView):
    {% if authentication_present -%}
    required_roles = None
    {% endif %}
    def post(self, request, process_id, *args, **kwargs):
        process = get_object_or_404(Process, id=process_id)
        active_process = process.start_process(request.user)
        return redirect(f"{active_process.active_node.url}/{active_process.id}/{active_process.active_node.id}")


class RedirectToProcessView(GenericView):
    {% if authentication_present -%}
    required_roles = None
    {% endif %}
    def post(self, request, active_process_id, *args, **kwargs):
        active_process = get_object_or_404(ActiveProcess, id=active_process_id)
        return redirect(f"{active_process.active_node.url}/{active_process.id}/{active_process.active_node.id}")


class CompleteProcessStepView(GenericView):
    {% if authentication_present -%}
    required_roles = None
    {% endif %}
    def post(self, request, active_process_id, *args, **kwargs):
        active_process = get_object_or_404(ActiveProcess, id=active_process_id)
        active_process.complete_node(request.user)
        return redirect(f'/{request.user.roles[0]}')


class ActionLogView(GenericTemplateView):
    {% if authentication_present -%}
    required_roles = [{% for name in manager_roles %}'{{ name }}'{% if not loop.last %}, {% endif %}{% endfor %}]
    {% endif %}
    def __init__(self, template_name, **kwargs):
        super().__init__(**kwargs)
        self.template_name = template_name
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        action_logs = ActionLog.objects.all()
    
        if status_filter := self.request.GET.get("status"):
            action_logs = action_logs.filter(status=status_filter)
        
        if user_filter := self.request.GET.get("user"):
            action_logs = action_logs.filter(user__username=user_filter)
        
        if active_process_filter := self.request.GET.get("active_process_id"):
            action_logs = action_logs.filter(active_process__id=active_process_filter)
        
        context = {
            'action_logs': action_logs,
            'status_choices': ActionLog.STATUS_CHOICES,
        }

        return context