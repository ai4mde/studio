from django.shortcuts import get_object_or_404
from django.urls import reverse, reverse_lazy
from django.views.generic import TemplateView
from shared_models.models import *
from shared_models.views import GenericListView, GenericCreateView, GenericUpdateView, GenericDeleteView, GenericTemplateView
from workflow_engine.models import ActiveProcess, ActiveProcessNode, Process

{# Create, Update, Delete views #}
{% for page in pages -%}
{% for section_component in page.section_components -%}

{% if section_component.has_create_operation %}
class {{ page }}_{{ section_component }}_CreateView(GenericCreateView):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    model = {{ section_component.primary_model }}
    fields = [{% for attribute in section_component.attributes %}'{{ attribute }}'{% if not loop.last %}, {% endif %}{% endfor %}]
    template_name = '{{ application_name }}_{{ page }}.html'
    {% if page.type == 'activity' -%}

    def get_success_url(self):
        return reverse('{{ application_name }}:render_{{ application_name }}_{{ page }}', kwargs={
            'active_process_node_id': self.kwargs.get('active_process_node_id'),
        })
    {% else -%}
    success_url = reverse_lazy('{{ application_name }}:render_{{ application_name }}_{{ page }}')
    {% endif %}

    def form_valid(self, form):
        instance = form.save(commit=False)
        {% for attribute in section_component.attributes -%}
        {% if not attribute.derived -%}
        {% if attribute.type == AttributeType.BOOLEAN -%}
        instance.{{ attribute }} = (self.request.POST.get('{{ attribute }}') == 'on')
        {% elif attribute.type in [AttributeType.STRING, AttributeType.ENUM] -%}
        if not instance.{{ attribute }}:
            instance.{{ attribute }} = None
        {% endif -%}
        {% endif -%}
        {% endfor -%}
        {% for parent_model in section_component.parent_models -%}
        instance.{{ parent_model }} = get_object_or_404({{ parent_model }}, pk=self.request.POST.get('{{ parent_model }}'))
        {% endfor -%}
        {% if page.type == 'activity' %}
        instance.save()
        active_process_node = get_object_or_404(
            ActiveProcessNode,
            pk=self.kwargs.get('active_process_node_id'),
        )
        active_process_node.active_process.add_associated_instance(instance)
        {% endif -%}
        return super().form_valid(form)
{% endif %}

{% if section_component.has_update_operation %}
class {{ page }}_{{ section_component }}_UpdateView(GenericUpdateView):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    model = {{ section_component.primary_model }}
    fields = [{% for attribute in section_component.attributes %}'{{ attribute }}'{% if not loop.last %}, {% endif %}{% endfor %}]
    template_name = '{{ application_name }}_{{ page }}.html'
    {% if page.type == 'activity' -%}

    def get_success_url(self):
        return reverse('{{ application_name }}:render_{{ application_name }}_{{ page }}', kwargs={
            'active_process_node_id': self.kwargs.get('active_process_node_id'),
        })
    {% else -%}
    success_url = reverse_lazy('{{ application_name }}:render_{{ application_name }}_{{ page }}')
    {% endif %}

    def form_valid(self, form):
        instance = form.save(commit=False)
        {% for attribute in section_component.attributes -%}
        {% if not attribute.derived -%}
        {% if attribute.type == AttributeType.BOOLEAN -%}
        instance.{{ attribute }} = (self.request.POST.get('{{ attribute }}') == 'on')
        {% elif attribute.type in [AttributeType.STRING, AttributeType.ENUM] -%}
        if not instance.{{ attribute }}:
            instance.{{ attribute }} = None
        {% endif -%}
        {% endif -%}
        {% endfor -%}
        {% for parent_model in section_component.parent_models -%}
        instance.{{ parent_model }} = get_object_or_404({{ parent_model }}, pk=self.request.POST.get('{{ parent_model }}'))
        {% endfor -%}
        return super().form_valid(form)
{% endif -%}

{% if section_component.has_delete_operation -%}
class {{ page }}_{{ section_component }}_DeleteView(GenericDeleteView):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    model = {{ section_component.primary_model }}
    template_name = '{{ application_name }}_{{ page }}.html'
    {% if page.type == 'activity' -%}

    def get_success_url(self):
        return reverse('{{ application_name }}:render_{{ application_name }}_{{ page }}', kwargs={
            'active_process_node_id': self.kwargs.get('active_process_node_id'),
        })
    {% else -%}
    success_url = reverse_lazy('{{ application_name }}:render_{{ application_name }}_{{ page }}')
    {% endif -%}

    {% if page.type == 'activity' %}
    def delete(self, request, *args, **kwargs):
        instance = self.get_object()
        active_process_node = get_object_or_404(
            ActiveProcessNode,
            pk=self.kwargs.get('active_process_node_id'),
        )
        active_process_node.active_process.remove_associated_instance(instance)
        return super().delete(request, *args, **kwargs)

    {% endif -%}
{% endif -%}
{% endfor -%}
{% endfor -%}

{# List views #}
{% for page in pages %}
class {{ application_name }}_{{ page }}_ListView(GenericListView):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    template_name='{{ application_name }}_{{ page }}.html'
    model = {{ models_on_pages[page]['primary_models'][0] }}
    context_object_name = '{{ models_on_pages[page]['primary_models'][0] }}_list'

    {% if page.type == 'activity' -%}
    def get_queryset(self):
        return self.active_process_node.active_process.{{ models_on_pages[page]['primary_models'][0].lower() }}s
    {% endif -%}

    {% if models_on_pages[page]['parent_models'] or page.type == 'activity' %}
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        {% for model in models_on_pages[page]['parent_models'] -%}
        context['parent_{{model}}_list'] = {{model}}.objects.all()
        {% endfor -%}
        {% if page.type == 'activity' -%}
        {% if models_on_pages[page]['primary_models'] | length > 1 -%}
        {% for primary_model in models_on_pages[page]['primary_models'][1:] -%}
        context['{{ primary_model }}_list'] = self.active_process_node.active_process.{{ primary_model.lower() }}s
        {% endfor -%}
        {% endif -%}
        context['active_process_node_id'] = self.kwargs.get('active_process_node_id')
        {% endif -%}
        return context

    {% endif -%}
{% endfor -%}


{# Home render view #}
class HomeRenderView(GenericTemplateView):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    template_name = '{{ application_name }}_home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['user'] = self.request.user
        context['active_process_nodes'] = ActiveProcessNode.objects.filter(
            user=self.request.user,
            active_process__completed=False,
        )
        context['available_processes'] = Process.get_available_processes(self.request.user)
        return context
