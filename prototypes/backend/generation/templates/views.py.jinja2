from django.shortcuts import get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import TemplateView
from shared_models.models import *
from shared_models.views import GenericListView, GenericCreateView, GenericUpdateView, GenericDeleteView, RoleRequiredMixin, LoginRequiredMixin
from workflow_engine.models import ActiveProcess, Process

{# Create, Update, Delete views #}
{% for page in pages -%}
{% for section_component in page.section_components -%}

{% if section_component.has_create_operation or section_component.has_update_operation or section_component.has_delete_operation %}
class {{page}}_{{ section_component }}_{% if section_component.has_create_operation%}Create{% elif section_component.has_update_operation %}Update{% else %}Delete{% endif %}View(Generic{% if section_component.has_create_operation %}Create{% elif section_component.has_update_operation %}Update{% else %}Delete{% endif %}View):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    model = {{ section_component.primary_model }}
    fields = [{% for attribute in section_component.attributes %}'{{ attribute }}'{% if not loop.last %}, {% endif %}{% endfor %}]
    template_name = '{{ application_name }}_{{ page }}.html'
    success_url = reverse_lazy('render_{{ application_name }}_{{ page }}') 

    {% if not section_component.has_delete_operation -%}
    def form_valid(self, form):
        instance = form.save(commit=False)
        {% for attribute in section_component.attributes -%}
        {% if not attribute.derived -%}
        {% if attribute.type == AttributeType.BOOLEAN -%}
        instance.{{ attribute }} = (self.request.POST.get('instance_{{ attribute }}') == 'on')
        {% elif attribute.type in [AttributeType.STRING, AttributeType.ENUM] -%}
        if not instance.{{ attribute }}:
            instance.{{ attribute }} = None
        {% endif -%}
        {% endif -%}
        {% endfor -%}
        {% for parent_model in section_component.parent_models -%}
        instance.{{ parent_model }} = get_object_or_404({{ parent_model }}, pk=self.request.POST.get('{{ parent_model }}'))
        {% endfor -%}
        return super().form_valid(form)
    {% endif -%}
{% endif -%}
{% endfor -%}
{% endfor -%}


{# List views #}
{% for page in pages %}
class {{ application_name }}_{{ page }}_ListView(GenericListView{% if authentication_present %}, RoleRequiredMixin{% endif %}):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    template_name='{{ application_name }}_{{ page }}.html'
    model = {{ models_on_pages[page]['primary_model'] }}
    context_object_name = '{{ models_on_pages[page]['primary_model'] }}_list'

    {% if page.type == 'activity' -%}
    def get_queryset(self):
        active_process = get_object_or_404(
            ActiveProcess,
            pk=self.kwargs.get('active_process_id'),
        )
        return active_process.{{ models_on_pages[page]['primary_model'].lower() }}s
    {% endif -%}

    {% if models_on_pages[page]['parent_models'] or page.type == 'activity' %}
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        {% for model in models_on_pages[page]['parent_models'] -%}
        context['parent_{{model}}_list'] = {{model}}.objects.all()
        {% endfor -%}
        {% if page.type == 'activity' -%}
        context['active_process_id'] = self.kwargs.get('active_process_id')
        context['active_node_id'] = self.kwargs.get('active_node_id')
        {% endif -%}
        return context
    {% endif -%}
{% endfor -%}


{# Home render view #}
class HomeRenderView(TemplateView{% if authentication_present %}, LoginRequiredMixin, RoleRequiredMixin{% endif %}):
    {% if authentication_present -%}
    required_roles = ['{{ application_name }}']
    {% endif -%}
    template_name = '{{ application_name }}_home.html'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['user'] = self.request.user
        context['active_processes'] = ActiveProcess.objects.filter(user=self.request.user, completed=False)
        context['available_processes'] = Process.get_available_processes(self.request.user)
        return context
