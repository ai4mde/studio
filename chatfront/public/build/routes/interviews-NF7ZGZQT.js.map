{
  "version": 3,
  "sources": ["../../../app/routes/interviews.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/interviews.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/interviews.tsx\");\n  import.meta.hot.lastModified = \"1738662837905.6753\";\n}\n// REMIX HMR END\n\nimport * as React from \"react\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport { promises as fs } from \"fs\";\nimport path from \"path\";\nimport matter from \"gray-matter\";\nimport MaxWidthWrapper from \"../components/layout/max-width-wrapper\";\nimport { requireUser } from \"../services/session.server\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"../components/ui/card\";\nimport { FileText } from \"lucide-react\";\nexport const meta = () => {\n  return [{\n    title: \"Interview Logs - AI4MDE\"\n  }, {\n    description: \"Interview logs and transcripts for AI4MDE project\"\n  }];\n};\nasync function getGroupInterviews(groupName) {\n  const interviewsDir = path.join(process.cwd(), 'data', groupName, 'interviews');\n  try {\n    const files = await fs.readdir(interviewsDir);\n    const mdFiles = files.filter(file => file.endsWith('.md'));\n    const interviews = await Promise.all(mdFiles.map(async file => {\n      const content = await fs.readFile(path.join(interviewsDir, file), 'utf-8');\n      const {\n        data: frontMatter,\n        content: interviewContent\n      } = matter(content);\n      return {\n        id: frontMatter.id || file.replace('.md', ''),\n        title: frontMatter.title || file.replace('.md', '').replace(/-/g, ' '),\n        description: frontMatter.description || interviewContent.slice(0, 150) + '...',\n        date: frontMatter.date || new Date().toISOString(),\n        filename: file\n      };\n    }));\n    return interviews.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  } catch (error) {\n    console.error('Error reading interviews:', error);\n    return [];\n  }\n}\nexport async function loader({\n  request\n}) {\n  try {\n    const user = await requireUser(request);\n    if (!user.group_name) {\n      throw new Response(\"User group not found\", {\n        status: 403\n      });\n    }\n    const interviews = await getGroupInterviews(user.group_name);\n    return json({\n      interviews\n    }, {\n      headers: {\n        'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n  } catch (error) {\n    // Redirect to login if authentication fails\n    if (error instanceof Response && error.status === 401) {\n      return redirect(\"/login?redirectTo=/interviews\");\n    }\n    throw error;\n  }\n}\nfunction InterviewCard({\n  id,\n  title,\n  description,\n  date\n}) {\n  return <Card className=\"group hover:shadow-md transition-shadow\">\n      <Link to={`/interview/${id}`} className=\"block h-full\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileText className=\"h-5 w-5 text-muted-foreground group-hover:text-primary transition-colors\" />\n            {title}\n          </CardTitle>\n          {date && <CardDescription>\n              {new Date(date).toLocaleDateString()}\n            </CardDescription>}\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground line-clamp-3\">{description}</p>\n        </CardContent>\n      </Link>\n    </Card>;\n}\n_c = InterviewCard;\nexport default function Interviews() {\n  _s();\n  const {\n    interviews\n  } = useLoaderData();\n  return <MaxWidthWrapper className=\"py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">Interview Logs</h1>\n        <p className=\"text-muted-foreground\">\n          Browse interview logs and transcripts for the AI4MDE project.\n        </p>\n      </div>\n\n      {interviews.length === 0 ? <div className=\"text-center py-12\">\n          <p className=\"text-muted-foreground\">No interview logs found.</p>\n        </div> : <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n          {interviews.map(interview => <InterviewCard key={interview.id} {...interview} />)}\n        </div>}\n    </MaxWidthWrapper>;\n}\n_s(Interviews, \"X0dMiTs0yV4pvdm2wkiaJQbfM4Y=\", false, function () {\n  return [useLoaderData];\n});\n_c2 = Interviews;\nvar _c, _c2;\n$RefreshReg$(_c, \"InterviewCard\");\n$RefreshReg$(_c2, \"Interviews\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,kBAA+B;AAI/B,yBAAmB;AAEnB,qBAA4B;AAyEhB;AApGZ,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,gCAAkC,EAAE;AAAA,EAC7E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2B;AAC3B,cAAY,IAAI,eAAe;AACjC;AAaO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,GAAG;AAAA,IACD,aAAa;AAAA,EACf,CAAC;AACH;AAsDA,SAAS,cAAc;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,SAAO,mDAAC,QAAK,WAAU,2CACnB,6DAAC,QAAK,IAAI,cAAc,MAAM,WAAU,gBACtC;AAAA,uDAAC,cACC;AAAA,yDAAC,aAAU,WAAU,2BACnB;AAAA,2DAAC,YAAS,WAAU,8EAApB;AAAA;AAAA;AAAA;AAAA,eAA+F;AAAA,QAC9F;AAAA,WAFH;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACC,QAAQ,mDAAC,mBACL,cAAI,KAAK,IAAI,EAAE,mBAAmB,KAD9B;AAAA;AAAA;AAAA;AAAA,aAEP;AAAA,SAPJ;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACA,mDAAC,eACC,6DAAC,OAAE,WAAU,sCAAsC,yBAAnD;AAAA;AAAA;AAAA;AAAA,WAA+D,KADjE;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAZF;AAAA;AAAA;AAAA;AAAA,SAaA,KAdG;AAAA;AAAA;AAAA;AAAA,SAeL;AACJ;AACA,KAAK;AACU,SAAR,aAA8B;AACnC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,mBAAgB,WAAU,QAC9B;AAAA,uDAAC,SAAI,WAAU,QACb;AAAA,yDAAC,QAAG,WAAU,2BAA0B,8BAAxC;AAAA;AAAA;AAAA;AAAA,aAAsD;AAAA,MACtD,mDAAC,OAAE,WAAU,yBAAwB,6EAArC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJF;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IAEC,WAAW,WAAW,IAAI,mDAAC,SAAI,WAAU,qBACtC,6DAAC,OAAE,WAAU,yBAAwB,wCAArC;AAAA;AAAA;AAAA;AAAA,WAA6D,KADtC;AAAA;AAAA;AAAA;AAAA,WAEzB,IAAS,mDAAC,SAAI,WAAU,4CACrB,qBAAW,IAAI,eAAa,mDAAC,iBAAkC,GAAG,aAAlB,UAAU,IAA9B;AAAA;AAAA;AAAA;AAAA,WAAiD,CAAE,KADzE;AAAA;AAAA;AAAA;AAAA,WAET;AAAA,OAZC;AAAA;AAAA;AAAA;AAAA,SAaL;AACJ;AACA,GAAG,YAAY,gCAAgC,OAAO,WAAY;AAChE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,eAAe;AAChC,aAAa,KAAK,YAAY;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
